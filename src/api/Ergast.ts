/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/{year}/constructors.json": {
    get: operations["getConstructorsByYear"];
    
  };
  "/{year}/constructorStandings.json": {
    get: operations["getConstructorStandingsByYear"];
    
  };
  "/{year}/driverStandings.json": {
    get: operations["getDriverStandingsByYear"];
    
  };
  "/{year}/results.json": {
    get: operations["getResultsByYear"];
    
  };
  "/{year}/constructors/{constructorId}/results.json": {
    get: operations["getResultsByYearAndConstructor"];
    
  };
  "/{year}/{round}/results.json": {
    get: operations["getResultsByYearAndRound"];
    
  };
  "/{year}/drivers.json": {
    get: operations["getDriversByYear"];
  };
  "/drivers.json": {
    get: operations["getAllDrivers"];
  };
  "/{year}.json": {
    get: operations["getSeasonByYear"];
    
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Circuit: {
      /** @example yas_marina */
      circuitId?: string;
      /** @example 21 */
      round?: string;
      /** @example http://en.wikipedia.org/wiki/Yas_Marina_Circuit */
      url?: string;
      /** @example Yas Marina Circuit */
      circuitName?: string;
      Location?: {
        /** @example 24.4672 */
        lat?: string;
        /** @example 54.6031 */
        long?: string;
        /** @example Abu Dhabi */
        locality?: string;
        /** @example UAE */
        country?: string;
      };
    };
    Constructor: {
      /** @example mercedes */
      constructorId?: string;
      /** @example http://en.wikipedia.org/wiki/Mercedes-Benz_in_Formula_One */
      url?: string;
      /** @example Mercedes */
      name?: string;
      /** @example German */
      nationality?: string;
    };
    Driver: {
      /** @example hamilton */
      driverId?: string;
      /** @example 44 */
      permanentNumber?: string;
      /** @example HAM */
      code?: string;
      /** @example http://en.wikipedia.org/wiki/Lewis_Hamilton */
      url?: string;
      /** @example Lewis */
      givenName?: string;
      /** @example Hamilton */
      familyName?: string;
      /** @example 1985-01-07 */
      dateOfBirth?: string;
      /** @example British */
      nationality?: string;
    };
    Race: {
      /** @example 2019 */
      season?: string;
      /** @example 21 */
      round?: string;
      /** @example https://en.wikipedia.org/wiki/2019_Abu_Dhabi_Grand_Prix */
      url?: string;
      /** @example Abu Dhabi Grand Prix */
      raceName?: string;
      Circuit?: components["schemas"]["Circuit"];
      /** @example 2019-12-01 */
      date?: string;
      /** @example 13:10:00Z */
      time?: string;
      Results?: (components["schemas"]["Result"])[];
    };
    Result: {
      /** @example 44 */
      number?: string;
      /** @example 1 */
      position?: string;
      /** @example 1 */
      positionText?: string;
      /** @example 26 */
      points?: string;
      Driver?: components["schemas"]["Driver"];
      Constructor?: components["schemas"]["Constructor"];
      /** @example 1 */
      grid?: string;
      /** @example 55 */
      laps?: string;
      /** @example Finished */
      status?: string;
      Time?: {
        /** @example 5645715 */
        millis?: string;
        /** @example 1:34:05.715 */
        time?: string;
      };
      FastestLap?: {
        /** @example 1 */
        rank?: string;
        /** @example 53 */
        lap?: string;
        Time?: {
          /** @example 1:39.283 */
          time?: string;
        };
        AverageSpeed?: {
          /** @example kph */
          units?: string;
          /** @example 201.387 */
          speed?: string;
        };
      };
    };
    ConstructorsByYearResponse: {
      MRData?: {
        xmlns?: string;
        series?: string;
        url?: string;
        /** @example 30 */
        limit?: string;
        /** @example 0 */
        offset?: string;
        /** @example 20 */
        total?: string;
        ConstructorTable?: {
          season?: string;
          Constructors?: (components["schemas"]["Constructor"])[];
        };
      };
    };
    ConstructorStandingsByYearResponse: {
      MRData?: {
        xmlns?: string;
        series?: string;
        url?: string;
        /** @example 30 */
        limit?: string;
        /** @example 0 */
        offset?: string;
        /** @example 20 */
        total?: string;
        StandingsTable?: {
          season?: string;
          StandingsLists?: ({
              season?: string;
              round?: string;
              ConstructorStandings?: ({
                  position?: string;
                  positionText?: string;
                  points?: string;
                  wins?: string;
                  Constructor?: components["schemas"]["Constructor"];
                })[];
            })[];
        };
      };
    };
    DriversResponse: {
      MRData?: {
        xmlns?: string;
        series?: string;
        url?: string;
        /** @example 30 */
        limit?: string;
        /** @example 0 */
        offset?: string;
        /** @example 20 */
        total?: string;
        DriverTable?: {
          Drivers?: (components["schemas"]["Driver"])[];
        };
      };
    };
    DriverStandingsByYearResponse: {
      MRData?: {
        xmlns?: string;
        series?: string;
        url?: string;
        /** @example 30 */
        limit?: string;
        /** @example 0 */
        offset?: string;
        /** @example 20 */
        total?: string;
        StandingsTable?: {
          season?: string;
          StandingsLists?: ({
              season?: string;
              round?: string;
              DriverStandings?: ({
                  position?: string;
                  positionText?: string;
                  points?: string;
                  wins?: string;
                  Driver?: components["schemas"]["Driver"];
                  Constructors?: (components["schemas"]["Constructor"])[];
                })[];
            })[];
        };
      };
    };
    ResultsByYearResponse: {
      MRData?: {
        xmlns?: string;
        series?: string;
        url?: string;
        /** @example 30 */
        limit?: string;
        /** @example 0 */
        offset?: string;
        /** @example 20 */
        total?: string;
        RaceTable?: {
          season?: string;
          /** @description Only returned if round parameter used */
          round?: string;
          Races?: (components["schemas"]["Race"])[];
        };
      };
    };
    SeasonByYearResponse: {
      MRData?: {
        xmlns?: string;
        series?: string;
        url?: string;
        /** @example 30 */
        limit?: string;
        /** @example 0 */
        offset?: string;
        /** @example 20 */
        total?: string;
        RaceTable?: {
          season?: string;
          Races?: (components["schemas"]["Race"])[];
        };
      };
    };
  };
  responses: never;
  parameters: {
    /** @description The number of items to skip before starting to collect the result set. */
    offsetParam: number;
    /** @description The numbers of items to return. */
    limitParam: number;
    /** @description Limit results to this constructor */
    constructorParam: string;
    /** @description Year in question */
    yearParam: string;
    /** @description Round in question */
    roundParam: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  getConstructorsByYear: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ConstructorsByYearResponse"];
        };
      };
    };
  };
  getConstructorStandingsByYear: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ConstructorStandingsByYearResponse"];
        };
      };
    };
  };
  getDriverStandingsByYear: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DriverStandingsByYearResponse"];
        };
      };
    };
  };
  getResultsByYear: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResultsByYearResponse"];
        };
      };
    };
  };
  getResultsByYearAndConstructor: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResultsByYearResponse"];
        };
      };
    };
  };
  getResultsByYearAndRound: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResultsByYearResponse"];
        };
      };
    };
  };
  getDriversByYear: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DriversResponse"];
        };
      };
    };
  };
  getAllDrivers: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DriversResponse"];
        };
      };
    };
  };
  getSeasonByYear: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SeasonByYearResponse"];
        };
      };
    };
  };
}

export type APIResponse = components['schemas'];